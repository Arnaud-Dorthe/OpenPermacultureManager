stages:
  - lint
  - build
  - test
  - build_version

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  TEST_IMAGE: ${CI_REGISTRY_IMAGE}/test:$CI_COMMIT_REF_SLUG
  PROD_LATEST: ${CI_REGISTRY_IMAGE}/ekylibre:latest
  REVIEW_HOST: ${CI_COMMIT_REF_SLUG}.ci.ekylibre.dev
  KUBE_NAMESPACE: eky-test-deploy

#  PROD_RAILS: ${CI_REGISTRY_IMAGE}/ekylibre-rails:$CI_COMMIT_REF_SLUG
#  PROD_RAILS_LATEST: ${CI_REGISTRY_IMAGE}/ekylibre-rails:latest
#  PROD_WEB: ${CI_REGISTRY_IMAGE}/ekylibre-web:$CI_COMMIT_REF_SLUG
#  PROD_WEB_LATEST: ${CI_REGISTRY_IMAGE}/ekylibre-web:latest


#########################################
#                 BUILD                 #
#########################################
build_test:
  image: registry.gitlab.com/ekylibre/docker-base-images/tools/deploy:1.5
  stage: build
  except:
    - tags
  services:
    - docker:19.03-dind
  before_script:
    - echo "${CI_JOB_TOKEN}" | docker login --username $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - /exec ruby /build.rb -v -r $CI_COMMIT_REF_SLUG -b $CI_REGISTRY_IMAGE -f docker/test/Dockerfile -i test

build_version:
  image: registry.gitlab.com/ekylibre/docker-base-images/tools/deploy:1
  stage: build_version
  only:
    - tags
  services:
    - docker:19.03-dind
  before_script:
    - echo "${CI_JOB_TOKEN}" | docker login --username $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - /exec ruby /build.rb -v -b $CI_REGISTRY_IMAGE -f docker/prod/Dockerfile -i ekylibre -r latest #-r $CI_COMMIT_TAG
#build_ci:
#  image: registry.gitlab.com/ekylibre/docker-base-images/tools/deploy:1
#  stage: build
#  when: manual
#  only:
#    - branches
#  variables:
#    RUBY_VERSION: "2.3"
#  services:
#    - docker:18-dind
#  before_script:
#    - apk add openssh-client
#    - /install-ssh-key $PLUGIN_SSH_KEY
#    - echo "${CI_JOB_TOKEN}" | docker login --username $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
#  script:
#    - for plugin in $EKYLIBRE_PLUGINS; do echo "git@gitlab.com:ekylibre/ekylibre-${plugin}.git" && git clone "git@gitlab.com:ekylibre/ekylibre-${plugin}.git" "plugins/${plugin}"; done
#    - /exec ruby /build.rb -v -r $CI_COMMIT_REF_SLUG -b $CI_REGISTRY_IMAGE -f docker/prod/Dockerfile -i ci-rails-aio-2.3
#
#
#.review_key: &REVIEW_KEY
#  name: review/eky/$CI_COMMIT_REF_NAME
#
#.review_branches: &REVIEW_BRANCHES
#  only:
#    - branches
#  except:
#    - prod
#    - core
#
#.default_review: &DEFAULT_REVIEW
#  <<: *REVIEW_BRANCHES
#  environment:
#    <<: *REVIEW_KEY
#    url: https://$REVIEW_HOST
#    on_stop: review_stop
#
#review_start:
#  <<: *DEFAULT_REVIEW
#  stage: review
#  dependencies:
#    - build_ci
#  image: registry.gitlab.com/ekylibre/helm-charts/ci-tool:master
#  variables:
#    GIT_STRATEGY: none
#  script:
#    - (cd /apps/eky-ci && helm dep update)
#    - helm tiller run "$KUBE_NAMESPACE" -- helm upgrade
#      --install
#      --namespace "$KUBE_NAMESPACE"
#      --set eky.image.tag=$CI_COMMIT_REF_SLUG
#      --set eky.postgres.database=$CI_COMMIT_REF_SLUG
#      --set eky.ingress.domain=${REVIEW_HOST}
#      --set eky.rails.init.tenants[0]=demo1
#      --set eky.rails.load.tenants[0]=demo
#      --set eky.rails.load.lexicon=true
#      ci-eky-${CI_COMMIT_REF_SLUG} /apps/eky-ci
#  when: manual
#
#review_stop:
#  <<: *REVIEW_BRANCHES
#  environment:
#    <<: *REVIEW_KEY
#    action: stop
#  stage: review
#  image: registry.gitlab.com/ekylibre/docker-base-images/tools/deploy:1
#  variables:
#    GIT_STRATEGY: none
#  script:
#    - helm tiller run "$KUBE_NAMESPACE" -- helm delete --purge ci-eky-${CI_COMMIT_REF_SLUG}
#  when: manual

#########################################
#                  LINT                 #
#########################################
rubocop:
  stage: lint
  image: registry.gitlab.com/ekylibre/tools/rubocop/rubocop:0.2.0
  variables:
     GIT_DEPTH: 1
  script:
    - rubocop --parallel

eslint:
  stage: lint
  image: node:14-alpine
  variables:
    GIT_DEPTH: 1
  script:
    - apk add git
    - yarn
    - yarn eslint .

# Unactivate until it s passed in local
# 
# hamllint:
#  stage: lint
#  image: ruby:2.6-buster
#  script:
#  - rm Gemfile
#  - bundle init
#  - echo "gem 'haml_lint', '0.40.1'" >> Gemfile
#  - echo "gem 'rubocop', '~> 1.11.0'" >> Gemfile
#  - bundle install
#  - haml-lint -c .haml-lint.yml

#########################################
#               TEMPLATES               #
#########################################
test:
  stage: test
  image: $TEST_IMAGE
  variables:
    REDIS_URL: redis://redis:6379/
    DB_HOST: postgres
    DB_USERNAME: ekylibre
    DB_TEST_NAME: ekylibre_test
    POSTGRES_HOST: postgres
    POSTGRES_USER: ekylibre
    POSTGRES_DB: ekylibre_test
    TZ: Europe/Paris
    GIT_STRATEGY: none
  services:
    # TODO switch to postgis/postgis:13-3.1-alpine when ready
    - name: mdillon/postgis:9.6-alpine
      alias: postgres
    - name: redis:5.0-alpine
      alias: redis
  except:
    - tags
  script:
    - bash /app/test/ci/run_tests "$ENV"
  after_script:
    - mv /app/coverage/ ./coverage/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/coverage.xml
  coverage: '/\(\d+.\d+\%\) covered/'

#########################################
#                 TESTS                 #
#########################################
#test_fast:
#  <<: *test_task
#  variables:
#    <<: *test_task_variables
#    SELECT: lower
#test_long:
#  <<: *test_task
#  variables:
#    <<: *test_task_variables
#    SELECT: higher
