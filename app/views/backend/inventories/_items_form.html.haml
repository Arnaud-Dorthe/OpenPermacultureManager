- currency_symbol = Onoma::Currency[Preference[:currency]].symbol
%table.table
  %thead
    %tr
      %th.left-align{colspan: 2}= Product.human_attribute_name(:name)
      %th.left-align{colspan: 2}= InventoryItem.human_attribute_name(:actual_population)
      %th.left-align{colspan: 2}= InventoryItem.human_attribute_name(:unit_pretax_stock_amount)
  %tbody
    = f.simple_fields_for :items, items do |nested|
      %tr.noHover.nested-fields
        = nested.association :product, as: :hidden
        = nested.input :expected_population, as: :hidden
        %td.inventory-items{colspan: 2}
          %span= link_to(nested.object.product.name, controller: "/backend/products", action: :show, id: nested.object.product_id, target: :_blank)
        %td.inventory-items{colspan: 2}
          - if nested.object.population_counting_unitary?
            %span= link_to(:details.tl, controller: "/backend/products", action: :show, id: nested.object.product_id)
          - else
            = nested.input :actual_population, wrapper: :nested_append do
              = nested.input_field :actual_population
              %span.add-on= nested.object.product.conditioning_unit.name
              %span.help-block= :expected_quantity_is_x.tl x: nested.object.expected_population.l(precision: 0)
        %td.inventory-items{colspan: 2}
          = nested.input :unit_pretax_stock_amount, wrapper: :nested_append do
            = nested.input_field :unit_pretax_stock_amount
            %span.add-on= currency_symbol + " / " + nested.object.product.conditioning_unit.name
